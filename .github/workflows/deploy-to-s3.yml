name: Deploy to S3 and CloudFront

on:
  push:
    branches: [ main ]
    paths: [ 'output/**' ]
  workflow_dispatch: # Allow manual triggering
    inputs:
      deploy_mode:
        description: 'Deploy mode'
        required: true
        default: 'changed'
        type: choice
        options:
        - changed
        - full

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Get files to deploy
      id: deploy-files
      run: |
        DEPLOY_MODE="${{ github.event.inputs.deploy_mode || 'changed' }}"
        echo "Deploy mode: $DEPLOY_MODE"
        
        if [ "${{ github.event_name }}" = "push" ]; then
          # For push events, always deploy only changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^output/" || true)
          echo "Push event: deploying changed files only"
        else
          # For manual workflow dispatch
          if [ "$DEPLOY_MODE" = "full" ]; then
            # Deploy all files in output directory
            CHANGED_FILES=$(find output -type f | sed 's|^output/||' || true)
            echo "Manual full deployment: deploying all files"
          else
            # Deploy only changed files (same as push logic)
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^output/" || true)
            echo "Manual changed deployment: deploying changed files"
          fi
        fi
        
        # Convert to JSON array for easier processing
        if [ -n "$CHANGED_FILES" ]; then
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" | jq -R -s -c 'split("\n")[:-1]' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "files=[]" >> $GITHUB_OUTPUT
        fi
        
        echo "Files to deploy: $CHANGED_FILES"
        
    - name: Sync files to S3
      if: steps.deploy-files.outputs.files != '[]'
      run: |
        DEPLOY_MODE="${{ github.event.inputs.deploy_mode || 'changed' }}"
        
        if [ "$DEPLOY_MODE" = "full" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Performing full deployment - syncing entire output directory"
          
          # Full sync with delete for complete deployment
          aws s3 sync output/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --exact-timestamps \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.xml"
          
          # Upload HTML and XML files with shorter cache
          aws s3 sync output/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --exact-timestamps \
            --cache-control "public, max-age=3600" \
            --include "*.html" \
            --include "*.xml"
        else
          echo "Performing incremental deployment - syncing changed files only"
          
          # Incremental sync without delete for changed files only
          aws s3 sync output/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --exact-timestamps \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.xml"
          
          # Upload HTML and XML files with shorter cache
          aws s3 sync output/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --exact-timestamps \
            --cache-control "public, max-age=3600" \
            --include "*.html" \
            --include "*.xml"
        fi
          
        echo "Files synced to S3 successfully"
        
    - name: Create CloudFront invalidation
      if: steps.deploy-files.outputs.files != '[]'
      run: |
        DEPLOY_MODE="${{ github.event.inputs.deploy_mode || 'changed' }}"
        CHANGED_FILES='${{ steps.deploy-files.outputs.files }}'
        
        if [ "$CHANGED_FILES" != "[]" ]; then
          if [ "$DEPLOY_MODE" = "full" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Full deployment: Invalidating entire CloudFront cache"
            
            # For full deployment, invalidate the entire site
            PATHS="/ /blog/ /blog/index.html /sitemap.xml"
          else
            echo "Incremental deployment: Invalidating changed files only"
            
            # Convert JSON array to space-separated paths and add leading slash
            PATHS=$(echo "$CHANGED_FILES" | jq -r '.[] | "/" + .' | tr '\n' ' ')
            
            # Add common paths that should always be invalidated
            PATHS="/ /blog/ /blog/index.html /sitemap.xml"
          fi
          
          echo "Invalidating CloudFront paths: $PATHS"
          
          # Create CloudFront invalidation
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths $PATHS
        else
          echo "No files changed, skipping CloudFront invalidation"
        fi
        
    - name: Deploy status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Website updated at: https://esra.co.nz"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
